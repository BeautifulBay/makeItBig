#!/usr/bin/env python
# -*- utf-8 -*-

import serial
import sys
import os
import re
import getopt

def printFunc(color, message):
	if color == 'red':
		colorNum = 31
	elif color == 'green':
		colorNum = 32
	elif color == 'blue':
		colorNum = 34
	elif color == 'purple':
		colorNum = 35
	else:
		colorNum = 31
	print '\033[%dm%s\033[0m' % (colorNum, message)

class MiniSerial:
	def __init__(self, sFile, sGrep):
		self.sFilePath = sFile
		self.sGrep = sGrep
		self.sFile = None
		self.choice = None

	def saveSerialLog(self):
		if self.sFilePath != None:
			if os.path.exists(self.sFilePath) and os.path.getsize(self.sFilePath):
				printFunc('red',
				"%s is not an empty file!\n" % self.sFilePath +
				"1-->quit\n" +
				"2-->overwrite\n" +
				"3-->append")
				try:
					self.choice = raw_input("Enter a number:")
					if self.choice != '2' and self.choice != '3':
						sys.exit()
				except KeyboardInterrupt, e:
					printFunc('red', e.message)
					sys.exit()
			try:
				if self.choice == '2':
					self.sFile = open(self.sFilePath, 'w')
				else :
					self.sFile = open(self.sFilePath, 'a+')

			except:
				printFunc('red', 'Can not open %s' % self.sFilePath)
				sys.exit()

	def miniSerialRun(self):
		try:
			self.ser = serial.Serial('/dev/ttyUSB0', 115200)
			printFunc('green', 'Uart log is being captured ...')
		except:
			printFunc('red', 'Can not open %s' % '/dev/ttyUSB0')
			sys.exit()
			
		while True:
			try:
				line = self.ser.readline()
				if self.sGrep:
					match = re.compile("^(.*)(%s)(.*)$" % self.sGrep).match(line)
					if match:
						print "%s\033[31m%s\033[0m%s" % (match.group(1), match.group(2), match.group(3))
				else:
					print line,

				if self.sFile:
					self.sFile.write(line);
			except (KeyboardInterrupt, serial.SerialException), e:
				printFunc('red', e.message)
				if self.sFile:
					self.sFile.close()
					printFunc('green', 'Uart log has been saved in \'%s\'' % self.sFilePath)
				self.ser.close()
				printFunc('green', 'exiting...')
				sys.exit()

def usage():
	printFunc('red',
	'Usage:\n' +
	'sudo Uart\n' +
	'sudo Uart -f fileName   : fileName is a file that you want to save log in\n' +
	'sudo Uart -g grepString : grepString is a string that you want to filter\n' +
	'Ctrl c to exit')

if __name__ == '__main__':
	try:
		options,args = getopt.getopt(sys.argv[1:], "hf:g:", ["help"])
	except getopt.GetoptError:
		usage()
		sys.exit()

	mFile = None
	mGrep = None
	for name,value in options:
		if name in ("-h","--help"):
			usage()
			sys.exit()
		if name in ("-f"):
			mFile = value
		if name in ("-g"):
			mGrep = value

	mOperator = MiniSerial(mFile, mGrep)
	mOperator.saveSerialLog()
	mOperator.miniSerialRun()
